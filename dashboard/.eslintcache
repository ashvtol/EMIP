[{"/Users/ashvtol/Documents/AdvanceProject/dashboard/src/App.js":"1","/Users/ashvtol/Documents/AdvanceProject/dashboard/src/Cards.js":"2","/Users/ashvtol/Documents/AdvanceProject/dashboard/src/CartesianPlot.js":"3","/Users/ashvtol/Documents/AdvanceProject/dashboard/src/HeaderMenu.js":"4","/Users/ashvtol/Documents/AdvanceProject/dashboard/src/reportWebVitals.js":"5","/Users/ashvtol/Documents/AdvanceProject/dashboard/src/index.js":"6"},{"size":2512,"mtime":1606883823752,"results":"7","hashOfConfig":"8"},{"size":3606,"mtime":1606956823151,"results":"9","hashOfConfig":"8"},{"size":6770,"mtime":1606959219670,"results":"10","hashOfConfig":"8"},{"size":4424,"mtime":1606955939709,"results":"11","hashOfConfig":"8"},{"size":362,"mtime":1606322407051,"results":"12","hashOfConfig":"8"},{"size":500,"mtime":1606322407050,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pqrnot",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ashvtol/Documents/AdvanceProject/dashboard/src/App.js",[],"/Users/ashvtol/Documents/AdvanceProject/dashboard/src/Cards.js",["28"],"import React from 'react';\nimport './cardStyle.css'\nimport Card from 'react-bootstrap/Card'\nimport classNames from 'classnames';\n\nlet label1Col = [];\nlet label2Col = [];\nlet label3Col = [];\n\n\nfunction initLabels(value) {\n    let labels = Object.keys(value);\n    labels = labels.filter(item => (item !== 'vehicle_java' && item !== 'rectangle_java'));\n    label1Col = labels.slice(0, 10);\n    label2Col = labels.slice(10, 19);\n    label3Col = labels.slice(19, -1);\n    // console.log(label1Col, label2Col, label3Col);\n    return labels;\n}\n\nclass Cards extends React.Component {\n    static getDerivedStateFromProps(props, state) {\n        if (props !== state) {\n            return {\n                data: props.data\n            };\n        }\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: this.props.data,\n            labels: initLabels(this.props.data)\n        }\n        // console.log(this.state.labels);\n    }\n\n    changeCardBg(value) {\n        if (value === 'correct_vehicle' || value === 'correct_rectangle') {\n            if (this.state.data[value] === 1) {\n                return \"linear-gradient(to right, #76b852, #8dc26f)\";\n            } else {\n                return \"linear-gradient(to right, #ed213a, #93291e)\";\n            }\n        }\n        return null;\n    }\n\n    render() {\n        return (\n            <>\n                <div class={\"cardsColumn1\"}>\n                    {label1Col.map((value, index) => {\n                        return (\n                            <Card bg=\"primary\" text=\"white\" className={\"cards\"}\n                                  style={{background: this.changeCardBg(value)}}>\n                                <Card.Body>\n                                    <Card.Title>{value}</Card.Title>\n                                    <Card.Text>\n                                        {this.state.data[value]}\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n                        )\n                    })}\n                </div>\n                <div className={\"cardsColumn2\"}>\n                    {label2Col.map((value, index) => {\n                        return (\n                            <Card bg=\"primary\" text=\"white\" className={\"cards\"}\n                                  style={{background: this.changeCardBg(value)}}>\n                                <Card.Body>\n                                    <Card.Title>{value}</Card.Title>\n                                    <Card.Text>\n                                        {this.state.data[value]}\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n                        )\n                    })}\n                </div>\n                <div className={\"cardsColumn3\"}>\n                    {label3Col.map((value, index) => {\n                        return (\n                            <Card bg=\"primary\" text=\"white\" className={\"cards\"}\n                                  style={{background: this.changeCardBg(value)}}>\n                                <Card.Body>\n                                    <Card.Title>{value}</Card.Title>\n                                    <Card.Text>\n                                        {this.state.data[value]}\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n                        )\n                    })}\n                </div>\n            </>\n        );\n    }\n}\n\nexport default Cards;\n","/Users/ashvtol/Documents/AdvanceProject/dashboard/src/CartesianPlot.js",["29"],"/Users/ashvtol/Documents/AdvanceProject/dashboard/src/HeaderMenu.js",["30","31"],"import React from 'react';\nimport './headerStyle.css'\nimport classNames from 'classnames';\n\nclass HeaderMenu extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: this.props.data,\n            lang: Object.keys(this.props.data)[0],\n            id: this.props.data[\"Java\"][0],\n        }\n        // console.log(this.state.data);\n        this.changeData = this.changeData.bind(this);\n    }\n\n    changeLanguage(value) {\n        this.setState((prev, current) => ({\n            lang: value,\n        }), () => {\n            this.changeID(this.state.data[this.state.lang][0])\n            console.log(\"Language changed to :\", this.state.lang);\n        });\n    }\n\n    changeID(value) {\n        this.setState((prev, current) => ({\n            id: value,\n        }), () => {\n            console.log(\"ID changed  to :\", this.state.id);\n        });\n    }\n\n    changeData() {\n        let value = {\n            \"lang\": this.state.lang,\n            \"id\": this.state.id,\n        }\n        this.props.mutateMenu(value);\n    }\n\n    selectRandomUser(){\n        let langList = Object.keys(this.state.data);\n        let randLang = langList[Math.floor(Math.random() * langList.length)];\n        let randIndex = Math.floor(Math.random() * this.state.data[randLang].length);\n        this.setState((prev, current) => ({\n            lang: randLang,\n            id: this.props.data[randLang][randIndex]\n        }), () => {\n            console.log(\"Random User Selected :\", \"id:\", this.state.id, \"lang:\", randLang);\n            this.changeData();\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className={\"header\"}>\n                    <div className={classNames(\"title\", \"rainbow_text_animated\")} >\n                        Eye Movement in Programming\n                    </div>\n                    <div className={\"menu\"}>\n                        <div id={\"menuItems\"}>\n                            <div className=\"dropdown\">\n                                <button className=\"btn btn-primary dropdown-toggle\" type=\"button\"\n                                        data-toggle=\"dropdown\"> {this.state.lang}\n                                    <span className=\"caret\"/></button>\n                                <ul className=\"dropdown-menu\">\n                                    {Object.keys(this.state.data).map((value, index) => {\n                                        return <li onClick={() => this.changeLanguage(value)}><a href={\"#\"}>{value}</a>\n                                        </li>\n                                    })}\n                                </ul>\n                            </div>\n                        </div>\n                        <div id={\"menuItems\"}>\n                            <div className=\"dropdown\">\n                                <button className=\"btn btn-primary dropdown-toggle\" type=\"button\"\n                                        data-toggle=\"dropdown\"> {this.state.id}\n                                    <span className=\"caret\"/></button>\n                                <ul className=\"dropdown-menu\">\n                                    {this.props.data[this.state.lang].map((value) => {\n                                        return <li onClick={() => this.changeID(value)}><a href={\"#\"}>{value}</a></li>\n                                    })}\n                                </ul>\n                            </div>\n                        </div>\n                        <div id={\"menuItems\"}>\n                            <div className=\"dropdown\">\n                                <button className=\"btn btn-primary dropdown-toggle\" type=\"button\"\n                                        data-toggle=\"dropdown\" onClick={() => this.changeData()}> GO\n                                </button>\n                            </div>\n                        </div>\n                        <div id={\"menuItems\"}>\n                            <div className=\"dropdown\">\n                                <button className=\"btn btn-primary dropdown-toggle\" type=\"button\"\n                                        data-toggle=\"dropdown\" onClick={() => this.selectRandomUser()}>Random User\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default HeaderMenu;\n","/Users/ashvtol/Documents/AdvanceProject/dashboard/src/reportWebVitals.js",[],"/Users/ashvtol/Documents/AdvanceProject/dashboard/src/index.js",[],{"ruleId":"32","severity":1,"message":"33","line":4,"column":8,"nodeType":"34","messageId":"35","endLine":4,"endColumn":18},{"ruleId":"32","severity":1,"message":"36","line":14,"column":55,"nodeType":"34","messageId":"35","endLine":14,"endColumn":62},{"ruleId":"37","severity":1,"message":"38","line":70,"column":95,"nodeType":"39","endLine":70,"endColumn":109},{"ruleId":"37","severity":1,"message":"38","line":83,"column":89,"nodeType":"39","endLine":83,"endColumn":103},"no-unused-vars","'classNames' is defined but never used.","Identifier","unusedVar","'Tooltip' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement"]