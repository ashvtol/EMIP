[{"/Users/ashvtol/Documents/AdvanceProject/dashboard/src/App.js":"1","/Users/ashvtol/Documents/AdvanceProject/dashboard/src/Cards.js":"2","/Users/ashvtol/Documents/AdvanceProject/dashboard/src/CartesianPlot.js":"3","/Users/ashvtol/Documents/AdvanceProject/dashboard/src/HeaderMenu.js":"4","/Users/ashvtol/Documents/AdvanceProject/dashboard/src/reportWebVitals.js":"5","/Users/ashvtol/Documents/AdvanceProject/dashboard/src/index.js":"6"},{"size":2512,"mtime":1606883823752,"results":"7","hashOfConfig":"8"},{"size":3606,"mtime":1606956823151,"results":"9","hashOfConfig":"8"},{"size":6770,"mtime":1606957508689,"results":"10","hashOfConfig":"8"},{"size":4424,"mtime":1606955939709,"results":"11","hashOfConfig":"8"},{"size":362,"mtime":1606322407051,"results":"12","hashOfConfig":"8"},{"size":500,"mtime":1606322407050,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pqrnot",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ashvtol/Documents/AdvanceProject/dashboard/src/App.js",[],"/Users/ashvtol/Documents/AdvanceProject/dashboard/src/Cards.js",["27"],"import React from 'react';\nimport './cardStyle.css'\nimport Card from 'react-bootstrap/Card'\nimport classNames from 'classnames';\n\nlet label1Col = [];\nlet label2Col = [];\nlet label3Col = [];\n\n\nfunction initLabels(value) {\n    let labels = Object.keys(value);\n    labels = labels.filter(item => (item !== 'vehicle_java' && item !== 'rectangle_java'));\n    label1Col = labels.slice(0, 10);\n    label2Col = labels.slice(10, 19);\n    label3Col = labels.slice(19, -1);\n    // console.log(label1Col, label2Col, label3Col);\n    return labels;\n}\n\nclass Cards extends React.Component {\n    static getDerivedStateFromProps(props, state) {\n        if (props !== state) {\n            return {\n                data: props.data\n            };\n        }\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: this.props.data,\n            labels: initLabels(this.props.data)\n        }\n        // console.log(this.state.labels);\n    }\n\n    changeCardBg(value) {\n        if (value === 'correct_vehicle' || value === 'correct_rectangle') {\n            if (this.state.data[value] === 1) {\n                return \"linear-gradient(to right, #76b852, #8dc26f)\";\n            } else {\n                return \"linear-gradient(to right, #ed213a, #93291e)\";\n            }\n        }\n        return null;\n    }\n\n    render() {\n        return (\n            <>\n                <div class={\"cardsColumn1\"}>\n                    {label1Col.map((value, index) => {\n                        return (\n                            <Card bg=\"primary\" text=\"white\" className={\"cards\"}\n                                  style={{background: this.changeCardBg(value)}}>\n                                <Card.Body>\n                                    <Card.Title>{value}</Card.Title>\n                                    <Card.Text>\n                                        {this.state.data[value]}\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n                        )\n                    })}\n                </div>\n                <div className={\"cardsColumn2\"}>\n                    {label2Col.map((value, index) => {\n                        return (\n                            <Card bg=\"primary\" text=\"white\" className={\"cards\"}\n                                  style={{background: this.changeCardBg(value)}}>\n                                <Card.Body>\n                                    <Card.Title>{value}</Card.Title>\n                                    <Card.Text>\n                                        {this.state.data[value]}\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n                        )\n                    })}\n                </div>\n                <div className={\"cardsColumn3\"}>\n                    {label3Col.map((value, index) => {\n                        return (\n                            <Card bg=\"primary\" text=\"white\" className={\"cards\"}\n                                  style={{background: this.changeCardBg(value)}}>\n                                <Card.Body>\n                                    <Card.Title>{value}</Card.Title>\n                                    <Card.Text>\n                                        {this.state.data[value]}\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n                        )\n                    })}\n                </div>\n            </>\n        );\n    }\n}\n\nexport default Cards;\n","/Users/ashvtol/Documents/AdvanceProject/dashboard/src/CartesianPlot.js",["28"],"/Users/ashvtol/Documents/AdvanceProject/dashboard/src/HeaderMenu.js",["29","30"],"/Users/ashvtol/Documents/AdvanceProject/dashboard/src/reportWebVitals.js",[],"/Users/ashvtol/Documents/AdvanceProject/dashboard/src/index.js",[],{"ruleId":"31","severity":1,"message":"32","line":4,"column":8,"nodeType":"33","messageId":"34","endLine":4,"endColumn":18},{"ruleId":"31","severity":1,"message":"35","line":14,"column":55,"nodeType":"33","messageId":"34","endLine":14,"endColumn":62},{"ruleId":"36","severity":1,"message":"37","line":70,"column":95,"nodeType":"38","endLine":70,"endColumn":109},{"ruleId":"36","severity":1,"message":"37","line":83,"column":89,"nodeType":"38","endLine":83,"endColumn":103},"no-unused-vars","'classNames' is defined but never used.","Identifier","unusedVar","'Tooltip' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement"]